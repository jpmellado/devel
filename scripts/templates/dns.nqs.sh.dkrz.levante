#!/bin/bash
#
#SBATCH --mail-type=ALL
#SBATCH --mail-user=juan.pedro.mellado@uni-hamburg.de
#SBATCH --account=um1276
########################### CHANGE ONLY THIS ###############################
########################### END LSF DIRECTIVES #############################
############################################################################
########################### DO NOT MODIFY ##################################
export TOOLS_HOME=$HOME/bin

export PATH=$PATH:$TOOLS_HOME
export CONFIG_FILE=$TOOLS_HOME/CONFIG.default

. $CONFIG_FILE

ABORT="no"

# Change this to reflect your directories
LOCALDIR=$SCRATCH/$JOBDIR
TRASHDIR=$SCRATCH/$JOBDIR-transfered

# Create Working Directories
mkdir -p $LOCALDIR

cd $LOCALDIR

dns.pre $LOCALDIR $STEP

touch *

# Load environment
export OMPI_MCA_osc="ucx"
export OMPI_MCA_pml="ucx"
export OMPI_MCA_btl="self"
export UCX_HANDLE_ERRORS="bt"
export OMPI_MCA_pml_ucx_opal_mem_hooks=1

export OMPI_MCA_io="romio321"          # basic optimisation of I/O
export UCX_TLS="shm,rc_mlx5,rc_x,self" # for jobs using LESS than 150 nodes
#export UCX_TLS="shm,dc_mlx5,dc_x,self" # for jobs using MORE than 150 nodes
export UCX_UNIFIED_MODE="y"            # JUST for homogeneous jobs on CPUs, do not use for GPU nodes

# This is for Intel MPI
#export I_MPI_PMI=pmi2
#export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi2.so

if [ $THREADSPERRANK -ge 2 ]; then
    export OMP_NUM_THREADS=${SLURM_CPUS_PER_TASK}
    export OMP_MAX_THREADS=${SLURM_CPUS_PER_TASK}
    export KMP_AFFINITY="granularity=fine,scatter"
    export KMP_LIBRARY="turnaround"
fi

# Run Simulation
case $RUNMODE in
"preprocess")
    preprocess $TIMESTAMP
    ABORT="yes"
    ;;
"simulation")
    simulation $TIMESTAMP
    if [ $? -ne 0 ]; then
        ABORT="yes"
    fi
    ;;
"postprocess")
    postprocess $TIMESTAMP
    ABORT="yes"
    ;;
esac

# Abort on several errors
if [ -f tlab.err ]; then
    ABORT="yes"
fi

if [ -f tlab.err.0 ]; then
    ABORT="yes"
fi

stat -t core* >/dev/null 2>&1 && ABORT="yes"

#clean
if [ -f tlab.ini ]; then
    cp tlab.ini tlab.ini-$TIMESTAMP
fi
LOGFILES="tlab.ini.bak tlab.log dns.out partinfos.txt mapping.txt"
for FILE in $LOGFILES; do
    if [ -f $FILE ]; then
        mv $FILE $FILE-$TIMESTAMP
    fi
done

# Organize statistics
STATSDIR=stats-$TIMESTAMP
if [ ! -e $STATSDIR ]; then
    mkdir $STATSDIR

    if [ -f tlab.ini ]; then
        cp tlab.ini $STATSDIR
    fi

    LIST=$(ls | egrep 'avg[a-zA-Z]*[0-9]|[xzr](sp|cr)[0-9]|pdf[0-9]|int[0-9]|kin[0-9]')
    echo "Moving statistic files into $STATSDIR"
    if [ -n "$LIST" ]; then
        mv $LIST $STATSDIR
    fi

else
    echo "$STATSDIR exists. Aborting"

fi

# Organize planes
PLANESDIR=planes-$TIMESTAMP
if [ ! -e $PLANESDIR ]; then
    mkdir $PLANESDIR
    mv planes?.* $PLANESDIR

else
    echo "$PLANESDIR exists. Aborting"

fi

if [ $RUNMODE = "simulation" ]; then

    # Requeue simulation
    if [ $ABORT = "no" ]; then
        if [ -f $LOCALDIR/dns.nqs.new-vars ]; then
            . $LOCALDIR/dns.nqs.new-vars
        fi

        if [ -f $LOCALDIR/tlab.ini ]; then
            ITIME=$(awk -F"=" '{
				if ( $1 == "End" )
				    {
				    print $2
				    }
			    }' $LOCALDIR/tlab.ini)
        else
            echo "Error getting max time"
            exit 1
        fi

        if [ $ITIME -lt $MAXITER ]; then
            # Submit Script
            qsend -name $NAME -queue $QUEUE -time $TIME -maxiter $MAXITER -mem $MEM \
                -script $SCRIPT -jobdir $JOBDIR -step $STEP -np $NP \
                -rankspernode $RANKSPERNODE -threadsperrank $THREADSPERRANK -commmode $COMMMODE

        fi
    fi
fi
